{"name":"Bshtap","tagline":"Yet another TAP testing library for /bin/sh","body":"bshtap(7)\r\n=========\r\n\r\nNAME\r\n----\r\nbshtap - Yet another TAP testing library for Bourne Shell\r\n\r\nSYNOPSIS\r\n--------\r\n```sh\r\n. /path/to/bshtap\r\ntests <n>\r\nskip_all [<reason>]\r\ndiag <message>\r\nok <command> [<test name>]\r\nis <command> <expected> [<test name>]\r\nisnt <command> <unexpected> [<test name>]\r\nlike <command> <expected regex> [<test name>]\r\nunlike <command> <unexpected regex> [<test name>]\r\ncmp_ok <command> <op> <expected> [<test name>]\r\nskip [<reason>] [<n>]\r\npiks\r\ntodo [<reason>]\r\nodot\r\ndone_testing [<n>]\r\n```\r\n\r\nEXAMPLES\r\n--------\r\n```sh\r\n#!/bin/sh\r\n\r\n. /path/to/your_functions.sh    # Load your functions that will be tested.\r\n                                # Of course you can use bshtap for testing\r\n                                # your commands installed in your PATH without\r\n                                # loading any functions.\r\n\r\n. /usr/share/bshtap/bshtap      # Load with the full path to the bshtap where\r\n                                # you installed.\r\n                                # Or set your PATH to the installed directory\r\n                                # and just load as '. bshtap'\r\n\r\ntests 13                        # use tests to set the number of tests\r\n\r\n#skip_all \"some reason\"         # skip_all prints '1..0 # SKIP some reason' and\r\n                                # exit immediately\r\n\r\n# you can also use 'done_testing' after tests(see below)\r\n\r\ndiag example tests              # diag for diagnostic messages\r\n\r\n\r\n# You can use ok, is, isnt, like, unlike, cmp_ok\r\n\r\nok true \"test name\"             # 'ok' checks the return value of the first\r\n                                # argument as command(s)\r\n\r\nok \"true foo\" \"test name #2\"    # Quote the test code when they are more than\r\n                                # 2 words. i.e. only the first argument is taken\r\n                                # as the test code\r\n\r\nok true                         # You can omit the test name.  It prints the\r\n                                # first argument as the test name\r\n\r\nis \"echo foo\" \"foo\"             # Use 'is' to check the output of the first\r\n                                # argument\r\n\r\nisnt \"echo foo\" \"bar\"           # 'isnt' for checking the output of the first\r\n                                # argument differ from the second\r\n\r\nlike \"date '+%Y'\" \"[0-9]{4}\"    # Use 'like' to check the output with RE(egrep).\r\n\r\nunlike \"echo foo\" \"[0-9]{4}\"    # 'unlike' is complementary to 'like'\r\n\r\ncmp_ok false -eq 1              # 'cmp_ok' is a generalized 'ok' with test\r\n                                # operator.  It tests the return value of the\r\n                                # first argument and the third argument with\r\n                                # second argument as a test operator.\r\n                                # e.g. in this example above, it is checking\r\n                                #      -------------------------\r\n                                #      false\r\n                                #      if [ $? -eq 1 ]; then\r\n                                #        echo ok\r\n                                #      else\r\n                                #        echo not ok\r\n                                #      fi\r\n                                #      -------------------------\r\n\r\nskip \"not implemented\" 3        # 'skip' skips following tests avoiding to\r\n        ok broken_func1         # invoke test commands until 'piks' invoked.\r\n        ok broken_func2         # Actually, the 'skip' prints out\r\n        ok broken_func3         #   'ok <n> # skip ...'\r\npiks                            # lines immediately and following bshtap\r\n                                # functions (e.g. ok, is, ...) are invoked and\r\n                                # just return soon.\r\n                                #\r\n                                # Note that it means normal commands will be\r\n                                # invoked as usual even if they are in 'skip'\r\n                                # ... 'piks' context.\r\n\r\ntodo \"we need this\"             # 'todo' prints out ' # TODO ...' messages\r\n        ok another_func1        # after each test output until 'otod' invoked.\r\n        ok another_func2\r\nodot\r\n\r\n#done_testing                   # Use 'done_testing' instead of 'tests' if you\r\n                                # don't want to specify the number of tests.\r\n                                # It counts the number of ok/is/isnt...etc. and\r\n                                # put the 1..N\r\n```\r\n\r\nINSTALLATION\r\n------------\r\nPlace the https://github.com/ktateish/bshtap/raw/master/bshtap script\r\nanywhere you want.\r\n\r\nOr download tarball from https://github.com/ktateish/bshtap/tarball/dist/\r\nand do the following:\r\n```\r\ntar xvf ktateish-bshtap-<version>.tar.gz\r\ncd ktateish-bshtap-<version>\r\n./configure\r\nmake                            # or gmake\r\nmake install\r\n```\r\n\r\nTESTED PLATFORMS\r\n----------------\r\n* Linux (GNU bash)\r\n* FreeBSD 9.x\r\n* NetBSD 6.1.3\r\n* OpenBSD 5.4\r\n* MacOS X Marvericks\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}